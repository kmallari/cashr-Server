// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: transaction.sql

package db

import (
	"context"
)

const cascadeCategoryDelete = `-- name: CascadeCategoryDelete :exec
delete
from transaction
where category_id = $1
  and user_id = $2
`

type CascadeCategoryDeleteParams struct {
	CategoryID string `json:"category_id"`
	UserID     string `json:"user_id"`
}

func (q *Queries) CascadeCategoryDelete(ctx context.Context, arg CascadeCategoryDeleteParams) error {
	_, err := q.db.ExecContext(ctx, cascadeCategoryDelete, arg.CategoryID, arg.UserID)
	return err
}

const createTransaction = `-- name: CreateTransaction :one
insert into transaction (user_id, amount, date, is_expense, category_id, description)
values ($1, $2, $3, $4, $5, $6)
returning id, user_id, amount, date, category_id, description, is_expense, created_at, updated_at
`

type CreateTransactionParams struct {
	UserID      string  `json:"user_id"`
	Amount      string  `json:"amount"`
	Date        int64   `json:"date"`
	IsExpense   bool    `json:"is_expense"`
	CategoryID  string  `json:"category_id"`
	Description *string `json:"description"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.Amount,
		arg.Date,
		arg.IsExpense,
		arg.CategoryID,
		arg.Description,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Date,
		&i.CategoryID,
		&i.Description,
		&i.IsExpense,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
delete
from transaction
where id = $1
  and user_id = $2
`

type DeleteTransactionParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.ID, arg.UserID)
	return err
}

const getUserTransactions = `-- name: GetUserTransactions :many
select transaction.id                           as id,
       transaction.user_id                      as user_id,
       amount,
       date,
       category.id                              as category_id,
       description,
       transaction.is_expense                   as is_expense,
       transaction.created_at                   as created_at,
       transaction.updated_at                   as updated_at,
       trim(both from concat(icon, ' ', label)) as category_label
from transaction
         left join category on transaction.category_id = category.id
where transaction.user_id = $1
`

type GetUserTransactionsRow struct {
	ID            string  `json:"id"`
	UserID        string  `json:"user_id"`
	Amount        string  `json:"amount"`
	Date          int64   `json:"date"`
	CategoryID    *string `json:"category_id"`
	Description   *string `json:"description"`
	IsExpense     bool    `json:"is_expense"`
	CreatedAt     int64   `json:"created_at"`
	UpdatedAt     int64   `json:"updated_at"`
	CategoryLabel string  `json:"category_label"`
}

func (q *Queries) GetUserTransactions(ctx context.Context, userID string) ([]GetUserTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserTransactions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserTransactionsRow
	for rows.Next() {
		var i GetUserTransactionsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Date,
			&i.CategoryID,
			&i.Description,
			&i.IsExpense,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryLabel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllTransactions = `-- name: ListAllTransactions :many
SELECT id, user_id, amount, date, category_id, description, is_expense, created_at, updated_at
FROM transaction
ORDER BY date DESC
`

func (q *Queries) ListAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, listAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Date,
			&i.CategoryID,
			&i.Description,
			&i.IsExpense,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const replaceTransactionCategory = `-- name: ReplaceTransactionCategory :exec
update transaction
set category_id = $2
where category_id = $1
  and user_id = $3
`

type ReplaceTransactionCategoryParams struct {
	CategoryID   string `json:"category_id"`
	CategoryID_2 string `json:"category_id_2"`
	UserID       string `json:"user_id"`
}

func (q *Queries) ReplaceTransactionCategory(ctx context.Context, arg ReplaceTransactionCategoryParams) error {
	_, err := q.db.ExecContext(ctx, replaceTransactionCategory, arg.CategoryID, arg.CategoryID_2, arg.UserID)
	return err
}

const updateTransaction = `-- name: UpdateTransaction :one
update transaction
set date        = coalesce($2, date),
    category_id = coalesce($3, category_id),
    description = coalesce($4, description),
    is_expense  = coalesce($5, is_expense),
    amount      = coalesce($6, amount),
    updated_at  = $7
where id = $1
returning id, user_id, amount, date, category_id, description, is_expense, created_at, updated_at
`

type UpdateTransactionParams struct {
	ID          string  `json:"id"`
	Date        int64   `json:"date"`
	CategoryID  string  `json:"category_id"`
	Description *string `json:"description"`
	IsExpense   bool    `json:"is_expense"`
	Amount      string  `json:"amount"`
	UpdatedAt   int64   `json:"updated_at"`
}

func (q *Queries) UpdateTransaction(ctx context.Context, arg UpdateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransaction,
		arg.ID,
		arg.Date,
		arg.CategoryID,
		arg.Description,
		arg.IsExpense,
		arg.Amount,
		arg.UpdatedAt,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Date,
		&i.CategoryID,
		&i.Description,
		&i.IsExpense,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
