//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmailpasswordUserToTenant = newEmailpasswordUserToTenantTable("public", "emailpassword_user_to_tenant", "")

type emailpasswordUserToTenantTable struct {
	postgres.Table

	// Columns
	AppID    postgres.ColumnString
	TenantID postgres.ColumnString
	UserID   postgres.ColumnString
	Email    postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmailpasswordUserToTenantTable struct {
	emailpasswordUserToTenantTable

	EXCLUDED emailpasswordUserToTenantTable
}

// AS creates new EmailpasswordUserToTenantTable with assigned alias
func (a EmailpasswordUserToTenantTable) AS(alias string) *EmailpasswordUserToTenantTable {
	return newEmailpasswordUserToTenantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailpasswordUserToTenantTable with assigned schema name
func (a EmailpasswordUserToTenantTable) FromSchema(schemaName string) *EmailpasswordUserToTenantTable {
	return newEmailpasswordUserToTenantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailpasswordUserToTenantTable with assigned table prefix
func (a EmailpasswordUserToTenantTable) WithPrefix(prefix string) *EmailpasswordUserToTenantTable {
	return newEmailpasswordUserToTenantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailpasswordUserToTenantTable with assigned table suffix
func (a EmailpasswordUserToTenantTable) WithSuffix(suffix string) *EmailpasswordUserToTenantTable {
	return newEmailpasswordUserToTenantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailpasswordUserToTenantTable(schemaName, tableName, alias string) *EmailpasswordUserToTenantTable {
	return &EmailpasswordUserToTenantTable{
		emailpasswordUserToTenantTable: newEmailpasswordUserToTenantTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newEmailpasswordUserToTenantTableImpl("", "excluded", ""),
	}
}

func newEmailpasswordUserToTenantTableImpl(schemaName, tableName, alias string) emailpasswordUserToTenantTable {
	var (
		AppIDColumn    = postgres.StringColumn("app_id")
		TenantIDColumn = postgres.StringColumn("tenant_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		EmailColumn    = postgres.StringColumn("email")
		allColumns     = postgres.ColumnList{AppIDColumn, TenantIDColumn, UserIDColumn, EmailColumn}
		mutableColumns = postgres.ColumnList{EmailColumn}
	)

	return emailpasswordUserToTenantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:    AppIDColumn,
		TenantID: TenantIDColumn,
		UserID:   UserIDColumn,
		Email:    EmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
