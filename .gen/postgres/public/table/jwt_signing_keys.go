//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var JwtSigningKeys = newJwtSigningKeysTable("public", "jwt_signing_keys", "")

type jwtSigningKeysTable struct {
	postgres.Table

	// Columns
	AppID     postgres.ColumnString
	KeyID     postgres.ColumnString
	KeyString postgres.ColumnString
	Algorithm postgres.ColumnString
	CreatedAt postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type JwtSigningKeysTable struct {
	jwtSigningKeysTable

	EXCLUDED jwtSigningKeysTable
}

// AS creates new JwtSigningKeysTable with assigned alias
func (a JwtSigningKeysTable) AS(alias string) *JwtSigningKeysTable {
	return newJwtSigningKeysTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JwtSigningKeysTable with assigned schema name
func (a JwtSigningKeysTable) FromSchema(schemaName string) *JwtSigningKeysTable {
	return newJwtSigningKeysTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JwtSigningKeysTable with assigned table prefix
func (a JwtSigningKeysTable) WithPrefix(prefix string) *JwtSigningKeysTable {
	return newJwtSigningKeysTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JwtSigningKeysTable with assigned table suffix
func (a JwtSigningKeysTable) WithSuffix(suffix string) *JwtSigningKeysTable {
	return newJwtSigningKeysTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJwtSigningKeysTable(schemaName, tableName, alias string) *JwtSigningKeysTable {
	return &JwtSigningKeysTable{
		jwtSigningKeysTable: newJwtSigningKeysTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newJwtSigningKeysTableImpl("", "excluded", ""),
	}
}

func newJwtSigningKeysTableImpl(schemaName, tableName, alias string) jwtSigningKeysTable {
	var (
		AppIDColumn     = postgres.StringColumn("app_id")
		KeyIDColumn     = postgres.StringColumn("key_id")
		KeyStringColumn = postgres.StringColumn("key_string")
		AlgorithmColumn = postgres.StringColumn("algorithm")
		CreatedAtColumn = postgres.IntegerColumn("created_at")
		allColumns      = postgres.ColumnList{AppIDColumn, KeyIDColumn, KeyStringColumn, AlgorithmColumn, CreatedAtColumn}
		mutableColumns  = postgres.ColumnList{KeyStringColumn, AlgorithmColumn, CreatedAtColumn}
	)

	return jwtSigningKeysTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:     AppIDColumn,
		KeyID:     KeyIDColumn,
		KeyString: KeyStringColumn,
		Algorithm: AlgorithmColumn,
		CreatedAt: CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
