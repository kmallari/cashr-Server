//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DashboardUsers = newDashboardUsersTable("public", "dashboard_users", "")

type dashboardUsersTable struct {
	postgres.Table

	// Columns
	AppID        postgres.ColumnString
	UserID       postgres.ColumnString
	Email        postgres.ColumnString
	PasswordHash postgres.ColumnString
	TimeJoined   postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DashboardUsersTable struct {
	dashboardUsersTable

	EXCLUDED dashboardUsersTable
}

// AS creates new DashboardUsersTable with assigned alias
func (a DashboardUsersTable) AS(alias string) *DashboardUsersTable {
	return newDashboardUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DashboardUsersTable with assigned schema name
func (a DashboardUsersTable) FromSchema(schemaName string) *DashboardUsersTable {
	return newDashboardUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DashboardUsersTable with assigned table prefix
func (a DashboardUsersTable) WithPrefix(prefix string) *DashboardUsersTable {
	return newDashboardUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DashboardUsersTable with assigned table suffix
func (a DashboardUsersTable) WithSuffix(suffix string) *DashboardUsersTable {
	return newDashboardUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDashboardUsersTable(schemaName, tableName, alias string) *DashboardUsersTable {
	return &DashboardUsersTable{
		dashboardUsersTable: newDashboardUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newDashboardUsersTableImpl("", "excluded", ""),
	}
}

func newDashboardUsersTableImpl(schemaName, tableName, alias string) dashboardUsersTable {
	var (
		AppIDColumn        = postgres.StringColumn("app_id")
		UserIDColumn       = postgres.StringColumn("user_id")
		EmailColumn        = postgres.StringColumn("email")
		PasswordHashColumn = postgres.StringColumn("password_hash")
		TimeJoinedColumn   = postgres.IntegerColumn("time_joined")
		allColumns         = postgres.ColumnList{AppIDColumn, UserIDColumn, EmailColumn, PasswordHashColumn, TimeJoinedColumn}
		mutableColumns     = postgres.ColumnList{EmailColumn, PasswordHashColumn, TimeJoinedColumn}
	)

	return dashboardUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:        AppIDColumn,
		UserID:       UserIDColumn,
		Email:        EmailColumn,
		PasswordHash: PasswordHashColumn,
		TimeJoined:   TimeJoinedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
