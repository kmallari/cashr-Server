//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TenantConfigs = newTenantConfigsTable("public", "tenant_configs", "")

type tenantConfigsTable struct {
	postgres.Table

	// Columns
	ConnectionURIDomain  postgres.ColumnString
	AppID                postgres.ColumnString
	TenantID             postgres.ColumnString
	CoreConfig           postgres.ColumnString
	EmailPasswordEnabled postgres.ColumnBool
	PasswordlessEnabled  postgres.ColumnBool
	ThirdPartyEnabled    postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TenantConfigsTable struct {
	tenantConfigsTable

	EXCLUDED tenantConfigsTable
}

// AS creates new TenantConfigsTable with assigned alias
func (a TenantConfigsTable) AS(alias string) *TenantConfigsTable {
	return newTenantConfigsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TenantConfigsTable with assigned schema name
func (a TenantConfigsTable) FromSchema(schemaName string) *TenantConfigsTable {
	return newTenantConfigsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TenantConfigsTable with assigned table prefix
func (a TenantConfigsTable) WithPrefix(prefix string) *TenantConfigsTable {
	return newTenantConfigsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TenantConfigsTable with assigned table suffix
func (a TenantConfigsTable) WithSuffix(suffix string) *TenantConfigsTable {
	return newTenantConfigsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTenantConfigsTable(schemaName, tableName, alias string) *TenantConfigsTable {
	return &TenantConfigsTable{
		tenantConfigsTable: newTenantConfigsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTenantConfigsTableImpl("", "excluded", ""),
	}
}

func newTenantConfigsTableImpl(schemaName, tableName, alias string) tenantConfigsTable {
	var (
		ConnectionURIDomainColumn  = postgres.StringColumn("connection_uri_domain")
		AppIDColumn                = postgres.StringColumn("app_id")
		TenantIDColumn             = postgres.StringColumn("tenant_id")
		CoreConfigColumn           = postgres.StringColumn("core_config")
		EmailPasswordEnabledColumn = postgres.BoolColumn("email_password_enabled")
		PasswordlessEnabledColumn  = postgres.BoolColumn("passwordless_enabled")
		ThirdPartyEnabledColumn    = postgres.BoolColumn("third_party_enabled")
		allColumns                 = postgres.ColumnList{ConnectionURIDomainColumn, AppIDColumn, TenantIDColumn, CoreConfigColumn, EmailPasswordEnabledColumn, PasswordlessEnabledColumn, ThirdPartyEnabledColumn}
		mutableColumns             = postgres.ColumnList{CoreConfigColumn, EmailPasswordEnabledColumn, PasswordlessEnabledColumn, ThirdPartyEnabledColumn}
	)

	return tenantConfigsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConnectionURIDomain:  ConnectionURIDomainColumn,
		AppID:                AppIDColumn,
		TenantID:             TenantIDColumn,
		CoreConfig:           CoreConfigColumn,
		EmailPasswordEnabled: EmailPasswordEnabledColumn,
		PasswordlessEnabled:  PasswordlessEnabledColumn,
		ThirdPartyEnabled:    ThirdPartyEnabledColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
