//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PasswordlessUserToTenant = newPasswordlessUserToTenantTable("public", "passwordless_user_to_tenant", "")

type passwordlessUserToTenantTable struct {
	postgres.Table

	// Columns
	AppID       postgres.ColumnString
	TenantID    postgres.ColumnString
	UserID      postgres.ColumnString
	Email       postgres.ColumnString
	PhoneNumber postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PasswordlessUserToTenantTable struct {
	passwordlessUserToTenantTable

	EXCLUDED passwordlessUserToTenantTable
}

// AS creates new PasswordlessUserToTenantTable with assigned alias
func (a PasswordlessUserToTenantTable) AS(alias string) *PasswordlessUserToTenantTable {
	return newPasswordlessUserToTenantTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PasswordlessUserToTenantTable with assigned schema name
func (a PasswordlessUserToTenantTable) FromSchema(schemaName string) *PasswordlessUserToTenantTable {
	return newPasswordlessUserToTenantTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PasswordlessUserToTenantTable with assigned table prefix
func (a PasswordlessUserToTenantTable) WithPrefix(prefix string) *PasswordlessUserToTenantTable {
	return newPasswordlessUserToTenantTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PasswordlessUserToTenantTable with assigned table suffix
func (a PasswordlessUserToTenantTable) WithSuffix(suffix string) *PasswordlessUserToTenantTable {
	return newPasswordlessUserToTenantTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPasswordlessUserToTenantTable(schemaName, tableName, alias string) *PasswordlessUserToTenantTable {
	return &PasswordlessUserToTenantTable{
		passwordlessUserToTenantTable: newPasswordlessUserToTenantTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newPasswordlessUserToTenantTableImpl("", "excluded", ""),
	}
}

func newPasswordlessUserToTenantTableImpl(schemaName, tableName, alias string) passwordlessUserToTenantTable {
	var (
		AppIDColumn       = postgres.StringColumn("app_id")
		TenantIDColumn    = postgres.StringColumn("tenant_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		EmailColumn       = postgres.StringColumn("email")
		PhoneNumberColumn = postgres.StringColumn("phone_number")
		allColumns        = postgres.ColumnList{AppIDColumn, TenantIDColumn, UserIDColumn, EmailColumn, PhoneNumberColumn}
		mutableColumns    = postgres.ColumnList{EmailColumn, PhoneNumberColumn}
	)

	return passwordlessUserToTenantTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:       AppIDColumn,
		TenantID:    TenantIDColumn,
		UserID:      UserIDColumn,
		Email:       EmailColumn,
		PhoneNumber: PhoneNumberColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
