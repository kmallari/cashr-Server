//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UseridMapping = newUseridMappingTable("public", "userid_mapping", "")

type useridMappingTable struct {
	postgres.Table

	// Columns
	AppID              postgres.ColumnString
	SupertokensUserID  postgres.ColumnString
	ExternalUserID     postgres.ColumnString
	ExternalUserIDInfo postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UseridMappingTable struct {
	useridMappingTable

	EXCLUDED useridMappingTable
}

// AS creates new UseridMappingTable with assigned alias
func (a UseridMappingTable) AS(alias string) *UseridMappingTable {
	return newUseridMappingTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UseridMappingTable with assigned schema name
func (a UseridMappingTable) FromSchema(schemaName string) *UseridMappingTable {
	return newUseridMappingTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UseridMappingTable with assigned table prefix
func (a UseridMappingTable) WithPrefix(prefix string) *UseridMappingTable {
	return newUseridMappingTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UseridMappingTable with assigned table suffix
func (a UseridMappingTable) WithSuffix(suffix string) *UseridMappingTable {
	return newUseridMappingTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUseridMappingTable(schemaName, tableName, alias string) *UseridMappingTable {
	return &UseridMappingTable{
		useridMappingTable: newUseridMappingTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newUseridMappingTableImpl("", "excluded", ""),
	}
}

func newUseridMappingTableImpl(schemaName, tableName, alias string) useridMappingTable {
	var (
		AppIDColumn              = postgres.StringColumn("app_id")
		SupertokensUserIDColumn  = postgres.StringColumn("supertokens_user_id")
		ExternalUserIDColumn     = postgres.StringColumn("external_user_id")
		ExternalUserIDInfoColumn = postgres.StringColumn("external_user_id_info")
		allColumns               = postgres.ColumnList{AppIDColumn, SupertokensUserIDColumn, ExternalUserIDColumn, ExternalUserIDInfoColumn}
		mutableColumns           = postgres.ColumnList{ExternalUserIDInfoColumn}
	)

	return useridMappingTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:              AppIDColumn,
		SupertokensUserID:  SupertokensUserIDColumn,
		ExternalUserID:     ExternalUserIDColumn,
		ExternalUserIDInfo: ExternalUserIDInfoColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
