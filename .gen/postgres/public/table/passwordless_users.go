//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PasswordlessUsers = newPasswordlessUsersTable("public", "passwordless_users", "")

type passwordlessUsersTable struct {
	postgres.Table

	// Columns
	AppID       postgres.ColumnString
	UserID      postgres.ColumnString
	Email       postgres.ColumnString
	PhoneNumber postgres.ColumnString
	TimeJoined  postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PasswordlessUsersTable struct {
	passwordlessUsersTable

	EXCLUDED passwordlessUsersTable
}

// AS creates new PasswordlessUsersTable with assigned alias
func (a PasswordlessUsersTable) AS(alias string) *PasswordlessUsersTable {
	return newPasswordlessUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PasswordlessUsersTable with assigned schema name
func (a PasswordlessUsersTable) FromSchema(schemaName string) *PasswordlessUsersTable {
	return newPasswordlessUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PasswordlessUsersTable with assigned table prefix
func (a PasswordlessUsersTable) WithPrefix(prefix string) *PasswordlessUsersTable {
	return newPasswordlessUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PasswordlessUsersTable with assigned table suffix
func (a PasswordlessUsersTable) WithSuffix(suffix string) *PasswordlessUsersTable {
	return newPasswordlessUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPasswordlessUsersTable(schemaName, tableName, alias string) *PasswordlessUsersTable {
	return &PasswordlessUsersTable{
		passwordlessUsersTable: newPasswordlessUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newPasswordlessUsersTableImpl("", "excluded", ""),
	}
}

func newPasswordlessUsersTableImpl(schemaName, tableName, alias string) passwordlessUsersTable {
	var (
		AppIDColumn       = postgres.StringColumn("app_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		EmailColumn       = postgres.StringColumn("email")
		PhoneNumberColumn = postgres.StringColumn("phone_number")
		TimeJoinedColumn  = postgres.IntegerColumn("time_joined")
		allColumns        = postgres.ColumnList{AppIDColumn, UserIDColumn, EmailColumn, PhoneNumberColumn, TimeJoinedColumn}
		mutableColumns    = postgres.ColumnList{EmailColumn, PhoneNumberColumn, TimeJoinedColumn}
	)

	return passwordlessUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:       AppIDColumn,
		UserID:      UserIDColumn,
		Email:       EmailColumn,
		PhoneNumber: PhoneNumberColumn,
		TimeJoined:  TimeJoinedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
