//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AppIDToUserID = newAppIDToUserIDTable("public", "app_id_to_user_id", "")

type appIDToUserIDTable struct {
	postgres.Table

	// Columns
	AppID                    postgres.ColumnString
	UserID                   postgres.ColumnString
	RecipeID                 postgres.ColumnString
	PrimaryOrRecipeUserID    postgres.ColumnString
	IsLinkedOrIsAPrimaryUser postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AppIDToUserIDTable struct {
	appIDToUserIDTable

	EXCLUDED appIDToUserIDTable
}

// AS creates new AppIDToUserIDTable with assigned alias
func (a AppIDToUserIDTable) AS(alias string) *AppIDToUserIDTable {
	return newAppIDToUserIDTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AppIDToUserIDTable with assigned schema name
func (a AppIDToUserIDTable) FromSchema(schemaName string) *AppIDToUserIDTable {
	return newAppIDToUserIDTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AppIDToUserIDTable with assigned table prefix
func (a AppIDToUserIDTable) WithPrefix(prefix string) *AppIDToUserIDTable {
	return newAppIDToUserIDTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AppIDToUserIDTable with assigned table suffix
func (a AppIDToUserIDTable) WithSuffix(suffix string) *AppIDToUserIDTable {
	return newAppIDToUserIDTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAppIDToUserIDTable(schemaName, tableName, alias string) *AppIDToUserIDTable {
	return &AppIDToUserIDTable{
		appIDToUserIDTable: newAppIDToUserIDTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newAppIDToUserIDTableImpl("", "excluded", ""),
	}
}

func newAppIDToUserIDTableImpl(schemaName, tableName, alias string) appIDToUserIDTable {
	var (
		AppIDColumn                    = postgres.StringColumn("app_id")
		UserIDColumn                   = postgres.StringColumn("user_id")
		RecipeIDColumn                 = postgres.StringColumn("recipe_id")
		PrimaryOrRecipeUserIDColumn    = postgres.StringColumn("primary_or_recipe_user_id")
		IsLinkedOrIsAPrimaryUserColumn = postgres.BoolColumn("is_linked_or_is_a_primary_user")
		allColumns                     = postgres.ColumnList{AppIDColumn, UserIDColumn, RecipeIDColumn, PrimaryOrRecipeUserIDColumn, IsLinkedOrIsAPrimaryUserColumn}
		mutableColumns                 = postgres.ColumnList{RecipeIDColumn, PrimaryOrRecipeUserIDColumn, IsLinkedOrIsAPrimaryUserColumn}
	)

	return appIDToUserIDTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:                    AppIDColumn,
		UserID:                   UserIDColumn,
		RecipeID:                 RecipeIDColumn,
		PrimaryOrRecipeUserID:    PrimaryOrRecipeUserIDColumn,
		IsLinkedOrIsAPrimaryUser: IsLinkedOrIsAPrimaryUserColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
