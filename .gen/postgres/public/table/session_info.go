//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var SessionInfo = newSessionInfoTable("public", "session_info", "")

type sessionInfoTable struct {
	postgres.Table

	// Columns
	AppID             postgres.ColumnString
	TenantID          postgres.ColumnString
	SessionHandle     postgres.ColumnString
	UserID            postgres.ColumnString
	RefreshTokenHash2 postgres.ColumnString
	SessionData       postgres.ColumnString
	ExpiresAt         postgres.ColumnInteger
	CreatedAtTime     postgres.ColumnInteger
	JwtUserPayload    postgres.ColumnString
	UseStaticKey      postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SessionInfoTable struct {
	sessionInfoTable

	EXCLUDED sessionInfoTable
}

// AS creates new SessionInfoTable with assigned alias
func (a SessionInfoTable) AS(alias string) *SessionInfoTable {
	return newSessionInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SessionInfoTable with assigned schema name
func (a SessionInfoTable) FromSchema(schemaName string) *SessionInfoTable {
	return newSessionInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SessionInfoTable with assigned table prefix
func (a SessionInfoTable) WithPrefix(prefix string) *SessionInfoTable {
	return newSessionInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SessionInfoTable with assigned table suffix
func (a SessionInfoTable) WithSuffix(suffix string) *SessionInfoTable {
	return newSessionInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSessionInfoTable(schemaName, tableName, alias string) *SessionInfoTable {
	return &SessionInfoTable{
		sessionInfoTable: newSessionInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newSessionInfoTableImpl("", "excluded", ""),
	}
}

func newSessionInfoTableImpl(schemaName, tableName, alias string) sessionInfoTable {
	var (
		AppIDColumn             = postgres.StringColumn("app_id")
		TenantIDColumn          = postgres.StringColumn("tenant_id")
		SessionHandleColumn     = postgres.StringColumn("session_handle")
		UserIDColumn            = postgres.StringColumn("user_id")
		RefreshTokenHash2Column = postgres.StringColumn("refresh_token_hash_2")
		SessionDataColumn       = postgres.StringColumn("session_data")
		ExpiresAtColumn         = postgres.IntegerColumn("expires_at")
		CreatedAtTimeColumn     = postgres.IntegerColumn("created_at_time")
		JwtUserPayloadColumn    = postgres.StringColumn("jwt_user_payload")
		UseStaticKeyColumn      = postgres.BoolColumn("use_static_key")
		allColumns              = postgres.ColumnList{AppIDColumn, TenantIDColumn, SessionHandleColumn, UserIDColumn, RefreshTokenHash2Column, SessionDataColumn, ExpiresAtColumn, CreatedAtTimeColumn, JwtUserPayloadColumn, UseStaticKeyColumn}
		mutableColumns          = postgres.ColumnList{UserIDColumn, RefreshTokenHash2Column, SessionDataColumn, ExpiresAtColumn, CreatedAtTimeColumn, JwtUserPayloadColumn, UseStaticKeyColumn}
	)

	return sessionInfoTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:             AppIDColumn,
		TenantID:          TenantIDColumn,
		SessionHandle:     SessionHandleColumn,
		UserID:            UserIDColumn,
		RefreshTokenHash2: RefreshTokenHash2Column,
		SessionData:       SessionDataColumn,
		ExpiresAt:         ExpiresAtColumn,
		CreatedAtTime:     CreatedAtTimeColumn,
		JwtUserPayload:    JwtUserPayloadColumn,
		UseStaticKey:      UseStaticKeyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
