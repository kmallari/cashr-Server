//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TotpUsedCodes = newTotpUsedCodesTable("public", "totp_used_codes", "")

type totpUsedCodesTable struct {
	postgres.Table

	// Columns
	AppID         postgres.ColumnString
	TenantID      postgres.ColumnString
	UserID        postgres.ColumnString
	Code          postgres.ColumnString
	IsValid       postgres.ColumnBool
	ExpiryTimeMs  postgres.ColumnInteger
	CreatedTimeMs postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TotpUsedCodesTable struct {
	totpUsedCodesTable

	EXCLUDED totpUsedCodesTable
}

// AS creates new TotpUsedCodesTable with assigned alias
func (a TotpUsedCodesTable) AS(alias string) *TotpUsedCodesTable {
	return newTotpUsedCodesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TotpUsedCodesTable with assigned schema name
func (a TotpUsedCodesTable) FromSchema(schemaName string) *TotpUsedCodesTable {
	return newTotpUsedCodesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TotpUsedCodesTable with assigned table prefix
func (a TotpUsedCodesTable) WithPrefix(prefix string) *TotpUsedCodesTable {
	return newTotpUsedCodesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TotpUsedCodesTable with assigned table suffix
func (a TotpUsedCodesTable) WithSuffix(suffix string) *TotpUsedCodesTable {
	return newTotpUsedCodesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTotpUsedCodesTable(schemaName, tableName, alias string) *TotpUsedCodesTable {
	return &TotpUsedCodesTable{
		totpUsedCodesTable: newTotpUsedCodesTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTotpUsedCodesTableImpl("", "excluded", ""),
	}
}

func newTotpUsedCodesTableImpl(schemaName, tableName, alias string) totpUsedCodesTable {
	var (
		AppIDColumn         = postgres.StringColumn("app_id")
		TenantIDColumn      = postgres.StringColumn("tenant_id")
		UserIDColumn        = postgres.StringColumn("user_id")
		CodeColumn          = postgres.StringColumn("code")
		IsValidColumn       = postgres.BoolColumn("is_valid")
		ExpiryTimeMsColumn  = postgres.IntegerColumn("expiry_time_ms")
		CreatedTimeMsColumn = postgres.IntegerColumn("created_time_ms")
		allColumns          = postgres.ColumnList{AppIDColumn, TenantIDColumn, UserIDColumn, CodeColumn, IsValidColumn, ExpiryTimeMsColumn, CreatedTimeMsColumn}
		mutableColumns      = postgres.ColumnList{CodeColumn, IsValidColumn, ExpiryTimeMsColumn}
	)

	return totpUsedCodesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:         AppIDColumn,
		TenantID:      TenantIDColumn,
		UserID:        UserIDColumn,
		Code:          CodeColumn,
		IsValid:       IsValidColumn,
		ExpiryTimeMs:  ExpiryTimeMsColumn,
		CreatedTimeMs: CreatedTimeMsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
