//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TotpUsers = newTotpUsersTable("public", "totp_users", "")

type totpUsersTable struct {
	postgres.Table

	// Columns
	AppID  postgres.ColumnString
	UserID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TotpUsersTable struct {
	totpUsersTable

	EXCLUDED totpUsersTable
}

// AS creates new TotpUsersTable with assigned alias
func (a TotpUsersTable) AS(alias string) *TotpUsersTable {
	return newTotpUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TotpUsersTable with assigned schema name
func (a TotpUsersTable) FromSchema(schemaName string) *TotpUsersTable {
	return newTotpUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TotpUsersTable with assigned table prefix
func (a TotpUsersTable) WithPrefix(prefix string) *TotpUsersTable {
	return newTotpUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TotpUsersTable with assigned table suffix
func (a TotpUsersTable) WithSuffix(suffix string) *TotpUsersTable {
	return newTotpUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTotpUsersTable(schemaName, tableName, alias string) *TotpUsersTable {
	return &TotpUsersTable{
		totpUsersTable: newTotpUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newTotpUsersTableImpl("", "excluded", ""),
	}
}

func newTotpUsersTableImpl(schemaName, tableName, alias string) totpUsersTable {
	var (
		AppIDColumn    = postgres.StringColumn("app_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		allColumns     = postgres.ColumnList{AppIDColumn, UserIDColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return totpUsersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:  AppIDColumn,
		UserID: UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
