//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PasswordlessDevices = newPasswordlessDevicesTable("public", "passwordless_devices", "")

type passwordlessDevicesTable struct {
	postgres.Table

	// Columns
	AppID          postgres.ColumnString
	TenantID       postgres.ColumnString
	DeviceIDHash   postgres.ColumnString
	Email          postgres.ColumnString
	PhoneNumber    postgres.ColumnString
	LinkCodeSalt   postgres.ColumnString
	FailedAttempts postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PasswordlessDevicesTable struct {
	passwordlessDevicesTable

	EXCLUDED passwordlessDevicesTable
}

// AS creates new PasswordlessDevicesTable with assigned alias
func (a PasswordlessDevicesTable) AS(alias string) *PasswordlessDevicesTable {
	return newPasswordlessDevicesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PasswordlessDevicesTable with assigned schema name
func (a PasswordlessDevicesTable) FromSchema(schemaName string) *PasswordlessDevicesTable {
	return newPasswordlessDevicesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PasswordlessDevicesTable with assigned table prefix
func (a PasswordlessDevicesTable) WithPrefix(prefix string) *PasswordlessDevicesTable {
	return newPasswordlessDevicesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PasswordlessDevicesTable with assigned table suffix
func (a PasswordlessDevicesTable) WithSuffix(suffix string) *PasswordlessDevicesTable {
	return newPasswordlessDevicesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPasswordlessDevicesTable(schemaName, tableName, alias string) *PasswordlessDevicesTable {
	return &PasswordlessDevicesTable{
		passwordlessDevicesTable: newPasswordlessDevicesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newPasswordlessDevicesTableImpl("", "excluded", ""),
	}
}

func newPasswordlessDevicesTableImpl(schemaName, tableName, alias string) passwordlessDevicesTable {
	var (
		AppIDColumn          = postgres.StringColumn("app_id")
		TenantIDColumn       = postgres.StringColumn("tenant_id")
		DeviceIDHashColumn   = postgres.StringColumn("device_id_hash")
		EmailColumn          = postgres.StringColumn("email")
		PhoneNumberColumn    = postgres.StringColumn("phone_number")
		LinkCodeSaltColumn   = postgres.StringColumn("link_code_salt")
		FailedAttemptsColumn = postgres.IntegerColumn("failed_attempts")
		allColumns           = postgres.ColumnList{AppIDColumn, TenantIDColumn, DeviceIDHashColumn, EmailColumn, PhoneNumberColumn, LinkCodeSaltColumn, FailedAttemptsColumn}
		mutableColumns       = postgres.ColumnList{EmailColumn, PhoneNumberColumn, LinkCodeSaltColumn, FailedAttemptsColumn}
	)

	return passwordlessDevicesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:          AppIDColumn,
		TenantID:       TenantIDColumn,
		DeviceIDHash:   DeviceIDHashColumn,
		Email:          EmailColumn,
		PhoneNumber:    PhoneNumberColumn,
		LinkCodeSalt:   LinkCodeSaltColumn,
		FailedAttempts: FailedAttemptsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
