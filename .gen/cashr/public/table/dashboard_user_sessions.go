//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DashboardUserSessions = newDashboardUserSessionsTable("public", "dashboard_user_sessions", "")

type dashboardUserSessionsTable struct {
	postgres.Table

	// Columns
	AppID       postgres.ColumnString
	SessionID   postgres.ColumnString
	UserID      postgres.ColumnString
	TimeCreated postgres.ColumnInteger
	Expiry      postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DashboardUserSessionsTable struct {
	dashboardUserSessionsTable

	EXCLUDED dashboardUserSessionsTable
}

// AS creates new DashboardUserSessionsTable with assigned alias
func (a DashboardUserSessionsTable) AS(alias string) *DashboardUserSessionsTable {
	return newDashboardUserSessionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DashboardUserSessionsTable with assigned schema name
func (a DashboardUserSessionsTable) FromSchema(schemaName string) *DashboardUserSessionsTable {
	return newDashboardUserSessionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DashboardUserSessionsTable with assigned table prefix
func (a DashboardUserSessionsTable) WithPrefix(prefix string) *DashboardUserSessionsTable {
	return newDashboardUserSessionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DashboardUserSessionsTable with assigned table suffix
func (a DashboardUserSessionsTable) WithSuffix(suffix string) *DashboardUserSessionsTable {
	return newDashboardUserSessionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDashboardUserSessionsTable(schemaName, tableName, alias string) *DashboardUserSessionsTable {
	return &DashboardUserSessionsTable{
		dashboardUserSessionsTable: newDashboardUserSessionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                   newDashboardUserSessionsTableImpl("", "excluded", ""),
	}
}

func newDashboardUserSessionsTableImpl(schemaName, tableName, alias string) dashboardUserSessionsTable {
	var (
		AppIDColumn       = postgres.StringColumn("app_id")
		SessionIDColumn   = postgres.StringColumn("session_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		TimeCreatedColumn = postgres.IntegerColumn("time_created")
		ExpiryColumn      = postgres.IntegerColumn("expiry")
		allColumns        = postgres.ColumnList{AppIDColumn, SessionIDColumn, UserIDColumn, TimeCreatedColumn, ExpiryColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, TimeCreatedColumn, ExpiryColumn}
	)

	return dashboardUserSessionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:       AppIDColumn,
		SessionID:   SessionIDColumn,
		UserID:      UserIDColumn,
		TimeCreated: TimeCreatedColumn,
		Expiry:      ExpiryColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
