//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmailverificationVerifiedEmails = newEmailverificationVerifiedEmailsTable("public", "emailverification_verified_emails", "")

type emailverificationVerifiedEmailsTable struct {
	postgres.Table

	// Columns
	AppID  postgres.ColumnString
	UserID postgres.ColumnString
	Email  postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmailverificationVerifiedEmailsTable struct {
	emailverificationVerifiedEmailsTable

	EXCLUDED emailverificationVerifiedEmailsTable
}

// AS creates new EmailverificationVerifiedEmailsTable with assigned alias
func (a EmailverificationVerifiedEmailsTable) AS(alias string) *EmailverificationVerifiedEmailsTable {
	return newEmailverificationVerifiedEmailsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailverificationVerifiedEmailsTable with assigned schema name
func (a EmailverificationVerifiedEmailsTable) FromSchema(schemaName string) *EmailverificationVerifiedEmailsTable {
	return newEmailverificationVerifiedEmailsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailverificationVerifiedEmailsTable with assigned table prefix
func (a EmailverificationVerifiedEmailsTable) WithPrefix(prefix string) *EmailverificationVerifiedEmailsTable {
	return newEmailverificationVerifiedEmailsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailverificationVerifiedEmailsTable with assigned table suffix
func (a EmailverificationVerifiedEmailsTable) WithSuffix(suffix string) *EmailverificationVerifiedEmailsTable {
	return newEmailverificationVerifiedEmailsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailverificationVerifiedEmailsTable(schemaName, tableName, alias string) *EmailverificationVerifiedEmailsTable {
	return &EmailverificationVerifiedEmailsTable{
		emailverificationVerifiedEmailsTable: newEmailverificationVerifiedEmailsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                             newEmailverificationVerifiedEmailsTableImpl("", "excluded", ""),
	}
}

func newEmailverificationVerifiedEmailsTableImpl(schemaName, tableName, alias string) emailverificationVerifiedEmailsTable {
	var (
		AppIDColumn    = postgres.StringColumn("app_id")
		UserIDColumn   = postgres.StringColumn("user_id")
		EmailColumn    = postgres.StringColumn("email")
		allColumns     = postgres.ColumnList{AppIDColumn, UserIDColumn, EmailColumn}
		mutableColumns = postgres.ColumnList{}
	)

	return emailverificationVerifiedEmailsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:  AppIDColumn,
		UserID: UserIDColumn,
		Email:  EmailColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
