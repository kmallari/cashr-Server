//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TenantThirdpartyProviders = newTenantThirdpartyProvidersTable("public", "tenant_thirdparty_providers", "")

type tenantThirdpartyProvidersTable struct {
	postgres.Table

	// Columns
	ConnectionURIDomain                          postgres.ColumnString
	AppID                                        postgres.ColumnString
	TenantID                                     postgres.ColumnString
	ThirdPartyID                                 postgres.ColumnString
	Name                                         postgres.ColumnString
	AuthorizationEndpoint                        postgres.ColumnString
	AuthorizationEndpointQueryParams             postgres.ColumnString
	TokenEndpoint                                postgres.ColumnString
	TokenEndpointBodyParams                      postgres.ColumnString
	UserInfoEndpoint                             postgres.ColumnString
	UserInfoEndpointQueryParams                  postgres.ColumnString
	UserInfoEndpointHeaders                      postgres.ColumnString
	JwksURI                                      postgres.ColumnString
	OidcDiscoveryEndpoint                        postgres.ColumnString
	RequireEmail                                 postgres.ColumnBool
	UserInfoMapFromIDTokenPayloadUserID          postgres.ColumnString
	UserInfoMapFromIDTokenPayloadEmail           postgres.ColumnString
	UserInfoMapFromIDTokenPayloadEmailVerified   postgres.ColumnString
	UserInfoMapFromUserInfoEndpointUserID        postgres.ColumnString
	UserInfoMapFromUserInfoEndpointEmail         postgres.ColumnString
	UserInfoMapFromUserInfoEndpointEmailVerified postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type TenantThirdpartyProvidersTable struct {
	tenantThirdpartyProvidersTable

	EXCLUDED tenantThirdpartyProvidersTable
}

// AS creates new TenantThirdpartyProvidersTable with assigned alias
func (a TenantThirdpartyProvidersTable) AS(alias string) *TenantThirdpartyProvidersTable {
	return newTenantThirdpartyProvidersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TenantThirdpartyProvidersTable with assigned schema name
func (a TenantThirdpartyProvidersTable) FromSchema(schemaName string) *TenantThirdpartyProvidersTable {
	return newTenantThirdpartyProvidersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TenantThirdpartyProvidersTable with assigned table prefix
func (a TenantThirdpartyProvidersTable) WithPrefix(prefix string) *TenantThirdpartyProvidersTable {
	return newTenantThirdpartyProvidersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TenantThirdpartyProvidersTable with assigned table suffix
func (a TenantThirdpartyProvidersTable) WithSuffix(suffix string) *TenantThirdpartyProvidersTable {
	return newTenantThirdpartyProvidersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTenantThirdpartyProvidersTable(schemaName, tableName, alias string) *TenantThirdpartyProvidersTable {
	return &TenantThirdpartyProvidersTable{
		tenantThirdpartyProvidersTable: newTenantThirdpartyProvidersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newTenantThirdpartyProvidersTableImpl("", "excluded", ""),
	}
}

func newTenantThirdpartyProvidersTableImpl(schemaName, tableName, alias string) tenantThirdpartyProvidersTable {
	var (
		ConnectionURIDomainColumn                          = postgres.StringColumn("connection_uri_domain")
		AppIDColumn                                        = postgres.StringColumn("app_id")
		TenantIDColumn                                     = postgres.StringColumn("tenant_id")
		ThirdPartyIDColumn                                 = postgres.StringColumn("third_party_id")
		NameColumn                                         = postgres.StringColumn("name")
		AuthorizationEndpointColumn                        = postgres.StringColumn("authorization_endpoint")
		AuthorizationEndpointQueryParamsColumn             = postgres.StringColumn("authorization_endpoint_query_params")
		TokenEndpointColumn                                = postgres.StringColumn("token_endpoint")
		TokenEndpointBodyParamsColumn                      = postgres.StringColumn("token_endpoint_body_params")
		UserInfoEndpointColumn                             = postgres.StringColumn("user_info_endpoint")
		UserInfoEndpointQueryParamsColumn                  = postgres.StringColumn("user_info_endpoint_query_params")
		UserInfoEndpointHeadersColumn                      = postgres.StringColumn("user_info_endpoint_headers")
		JwksURIColumn                                      = postgres.StringColumn("jwks_uri")
		OidcDiscoveryEndpointColumn                        = postgres.StringColumn("oidc_discovery_endpoint")
		RequireEmailColumn                                 = postgres.BoolColumn("require_email")
		UserInfoMapFromIDTokenPayloadUserIDColumn          = postgres.StringColumn("user_info_map_from_id_token_payload_user_id")
		UserInfoMapFromIDTokenPayloadEmailColumn           = postgres.StringColumn("user_info_map_from_id_token_payload_email")
		UserInfoMapFromIDTokenPayloadEmailVerifiedColumn   = postgres.StringColumn("user_info_map_from_id_token_payload_email_verified")
		UserInfoMapFromUserInfoEndpointUserIDColumn        = postgres.StringColumn("user_info_map_from_user_info_endpoint_user_id")
		UserInfoMapFromUserInfoEndpointEmailColumn         = postgres.StringColumn("user_info_map_from_user_info_endpoint_email")
		UserInfoMapFromUserInfoEndpointEmailVerifiedColumn = postgres.StringColumn("user_info_map_from_user_info_endpoint_email_verified")
		allColumns                                         = postgres.ColumnList{ConnectionURIDomainColumn, AppIDColumn, TenantIDColumn, ThirdPartyIDColumn, NameColumn, AuthorizationEndpointColumn, AuthorizationEndpointQueryParamsColumn, TokenEndpointColumn, TokenEndpointBodyParamsColumn, UserInfoEndpointColumn, UserInfoEndpointQueryParamsColumn, UserInfoEndpointHeadersColumn, JwksURIColumn, OidcDiscoveryEndpointColumn, RequireEmailColumn, UserInfoMapFromIDTokenPayloadUserIDColumn, UserInfoMapFromIDTokenPayloadEmailColumn, UserInfoMapFromIDTokenPayloadEmailVerifiedColumn, UserInfoMapFromUserInfoEndpointUserIDColumn, UserInfoMapFromUserInfoEndpointEmailColumn, UserInfoMapFromUserInfoEndpointEmailVerifiedColumn}
		mutableColumns                                     = postgres.ColumnList{NameColumn, AuthorizationEndpointColumn, AuthorizationEndpointQueryParamsColumn, TokenEndpointColumn, TokenEndpointBodyParamsColumn, UserInfoEndpointColumn, UserInfoEndpointQueryParamsColumn, UserInfoEndpointHeadersColumn, JwksURIColumn, OidcDiscoveryEndpointColumn, RequireEmailColumn, UserInfoMapFromIDTokenPayloadUserIDColumn, UserInfoMapFromIDTokenPayloadEmailColumn, UserInfoMapFromIDTokenPayloadEmailVerifiedColumn, UserInfoMapFromUserInfoEndpointUserIDColumn, UserInfoMapFromUserInfoEndpointEmailColumn, UserInfoMapFromUserInfoEndpointEmailVerifiedColumn}
	)

	return tenantThirdpartyProvidersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ConnectionURIDomain:                 ConnectionURIDomainColumn,
		AppID:                               AppIDColumn,
		TenantID:                            TenantIDColumn,
		ThirdPartyID:                        ThirdPartyIDColumn,
		Name:                                NameColumn,
		AuthorizationEndpoint:               AuthorizationEndpointColumn,
		AuthorizationEndpointQueryParams:    AuthorizationEndpointQueryParamsColumn,
		TokenEndpoint:                       TokenEndpointColumn,
		TokenEndpointBodyParams:             TokenEndpointBodyParamsColumn,
		UserInfoEndpoint:                    UserInfoEndpointColumn,
		UserInfoEndpointQueryParams:         UserInfoEndpointQueryParamsColumn,
		UserInfoEndpointHeaders:             UserInfoEndpointHeadersColumn,
		JwksURI:                             JwksURIColumn,
		OidcDiscoveryEndpoint:               OidcDiscoveryEndpointColumn,
		RequireEmail:                        RequireEmailColumn,
		UserInfoMapFromIDTokenPayloadUserID: UserInfoMapFromIDTokenPayloadUserIDColumn,
		UserInfoMapFromIDTokenPayloadEmail:  UserInfoMapFromIDTokenPayloadEmailColumn,
		UserInfoMapFromIDTokenPayloadEmailVerified:   UserInfoMapFromIDTokenPayloadEmailVerifiedColumn,
		UserInfoMapFromUserInfoEndpointUserID:        UserInfoMapFromUserInfoEndpointUserIDColumn,
		UserInfoMapFromUserInfoEndpointEmail:         UserInfoMapFromUserInfoEndpointEmailColumn,
		UserInfoMapFromUserInfoEndpointEmailVerified: UserInfoMapFromUserInfoEndpointEmailVerifiedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
