//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var EmailverificationTokens = newEmailverificationTokensTable("public", "emailverification_tokens", "")

type emailverificationTokensTable struct {
	postgres.Table

	// Columns
	AppID       postgres.ColumnString
	TenantID    postgres.ColumnString
	UserID      postgres.ColumnString
	Email       postgres.ColumnString
	Token       postgres.ColumnString
	TokenExpiry postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EmailverificationTokensTable struct {
	emailverificationTokensTable

	EXCLUDED emailverificationTokensTable
}

// AS creates new EmailverificationTokensTable with assigned alias
func (a EmailverificationTokensTable) AS(alias string) *EmailverificationTokensTable {
	return newEmailverificationTokensTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EmailverificationTokensTable with assigned schema name
func (a EmailverificationTokensTable) FromSchema(schemaName string) *EmailverificationTokensTable {
	return newEmailverificationTokensTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EmailverificationTokensTable with assigned table prefix
func (a EmailverificationTokensTable) WithPrefix(prefix string) *EmailverificationTokensTable {
	return newEmailverificationTokensTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EmailverificationTokensTable with assigned table suffix
func (a EmailverificationTokensTable) WithSuffix(suffix string) *EmailverificationTokensTable {
	return newEmailverificationTokensTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEmailverificationTokensTable(schemaName, tableName, alias string) *EmailverificationTokensTable {
	return &EmailverificationTokensTable{
		emailverificationTokensTable: newEmailverificationTokensTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newEmailverificationTokensTableImpl("", "excluded", ""),
	}
}

func newEmailverificationTokensTableImpl(schemaName, tableName, alias string) emailverificationTokensTable {
	var (
		AppIDColumn       = postgres.StringColumn("app_id")
		TenantIDColumn    = postgres.StringColumn("tenant_id")
		UserIDColumn      = postgres.StringColumn("user_id")
		EmailColumn       = postgres.StringColumn("email")
		TokenColumn       = postgres.StringColumn("token")
		TokenExpiryColumn = postgres.IntegerColumn("token_expiry")
		allColumns        = postgres.ColumnList{AppIDColumn, TenantIDColumn, UserIDColumn, EmailColumn, TokenColumn, TokenExpiryColumn}
		mutableColumns    = postgres.ColumnList{TokenExpiryColumn}
	)

	return emailverificationTokensTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:       AppIDColumn,
		TenantID:    TenantIDColumn,
		UserID:      UserIDColumn,
		Email:       EmailColumn,
		Token:       TokenColumn,
		TokenExpiry: TokenExpiryColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
