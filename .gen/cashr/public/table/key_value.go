//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var KeyValue = newKeyValueTable("public", "key_value", "")

type keyValueTable struct {
	postgres.Table

	// Columns
	AppID         postgres.ColumnString
	TenantID      postgres.ColumnString
	Name          postgres.ColumnString
	Value         postgres.ColumnString
	CreatedAtTime postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type KeyValueTable struct {
	keyValueTable

	EXCLUDED keyValueTable
}

// AS creates new KeyValueTable with assigned alias
func (a KeyValueTable) AS(alias string) *KeyValueTable {
	return newKeyValueTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new KeyValueTable with assigned schema name
func (a KeyValueTable) FromSchema(schemaName string) *KeyValueTable {
	return newKeyValueTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new KeyValueTable with assigned table prefix
func (a KeyValueTable) WithPrefix(prefix string) *KeyValueTable {
	return newKeyValueTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new KeyValueTable with assigned table suffix
func (a KeyValueTable) WithSuffix(suffix string) *KeyValueTable {
	return newKeyValueTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newKeyValueTable(schemaName, tableName, alias string) *KeyValueTable {
	return &KeyValueTable{
		keyValueTable: newKeyValueTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newKeyValueTableImpl("", "excluded", ""),
	}
}

func newKeyValueTableImpl(schemaName, tableName, alias string) keyValueTable {
	var (
		AppIDColumn         = postgres.StringColumn("app_id")
		TenantIDColumn      = postgres.StringColumn("tenant_id")
		NameColumn          = postgres.StringColumn("name")
		ValueColumn         = postgres.StringColumn("value")
		CreatedAtTimeColumn = postgres.IntegerColumn("created_at_time")
		allColumns          = postgres.ColumnList{AppIDColumn, TenantIDColumn, NameColumn, ValueColumn, CreatedAtTimeColumn}
		mutableColumns      = postgres.ColumnList{ValueColumn, CreatedAtTimeColumn}
	)

	return keyValueTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:         AppIDColumn,
		TenantID:      TenantIDColumn,
		Name:          NameColumn,
		Value:         ValueColumn,
		CreatedAtTime: CreatedAtTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
