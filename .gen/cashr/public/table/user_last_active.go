//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserLastActive = newUserLastActiveTable("public", "user_last_active", "")

type userLastActiveTable struct {
	postgres.Table

	// Columns
	AppID          postgres.ColumnString
	UserID         postgres.ColumnString
	LastActiveTime postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserLastActiveTable struct {
	userLastActiveTable

	EXCLUDED userLastActiveTable
}

// AS creates new UserLastActiveTable with assigned alias
func (a UserLastActiveTable) AS(alias string) *UserLastActiveTable {
	return newUserLastActiveTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserLastActiveTable with assigned schema name
func (a UserLastActiveTable) FromSchema(schemaName string) *UserLastActiveTable {
	return newUserLastActiveTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserLastActiveTable with assigned table prefix
func (a UserLastActiveTable) WithPrefix(prefix string) *UserLastActiveTable {
	return newUserLastActiveTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserLastActiveTable with assigned table suffix
func (a UserLastActiveTable) WithSuffix(suffix string) *UserLastActiveTable {
	return newUserLastActiveTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserLastActiveTable(schemaName, tableName, alias string) *UserLastActiveTable {
	return &UserLastActiveTable{
		userLastActiveTable: newUserLastActiveTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newUserLastActiveTableImpl("", "excluded", ""),
	}
}

func newUserLastActiveTableImpl(schemaName, tableName, alias string) userLastActiveTable {
	var (
		AppIDColumn          = postgres.StringColumn("app_id")
		UserIDColumn         = postgres.StringColumn("user_id")
		LastActiveTimeColumn = postgres.IntegerColumn("last_active_time")
		allColumns           = postgres.ColumnList{AppIDColumn, UserIDColumn, LastActiveTimeColumn}
		mutableColumns       = postgres.ColumnList{LastActiveTimeColumn}
	)

	return userLastActiveTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AppID:          AppIDColumn,
		UserID:         UserIDColumn,
		LastActiveTime: LastActiveTimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
